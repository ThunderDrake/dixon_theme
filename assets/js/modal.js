// Generated by CoffeeScript 1.12.7
(function() {
  (function(name, context, definition) {
    return context[name] = definition();
  })('Modal', this, function() {
    var Modal;
    Modal = (function() {
      function Modal(payload) {
        var M, button, el, i, inx, j, key, len, len1, rbuttons, ref, ref1;
        if (payload == null) {
          payload = {};
        }
        M = this;
        this.config = {
          title: '',
          cclass: '',
          dclass: '',
          content: '',
          buttons: [],
          setClose: [],
          timeout: 500,
          autoopen: true,
          callback: false
        };
        for (key in payload) {
          this.config[key] = payload[key];
        }
        rbuttons = [];
        ref = this.config.buttons;
        for (i = 0, len = ref.length; i < len; i++) {
          button = ref[i];
          inx = this.config.setClose.indexOf(button);
          el = $(button);
          this.config.setClose[inx] = el;
          rbuttons.push(el);
        }
        this.config.buttons = rbuttons;

        /* */
        this.bg = $('<div>', {
          "class": 'modal-background hidden'
        });
        this.config.setClose.push(this.bg);
        this.modal_container = $('<div>', {
          "class": 'modal-container hidden ' + this.config.cclass
        });
        this.modal_dialog = $('<div>', {
          "class": 'modal-dialog ' + this.config.dclass
        });
        this.modal_header = $('<div>', {
          "class": 'modal-header'
        });
        this.modal_content = $('<div>', {
          "class": 'modal-content'
        });
        this.modal_footer = $('<div>', {
          "class": 'modal-footer'
        });
        this.modal_header_close_button = $('<button>', {
          "class": 'modal-header-close'
        });
        this.config.setClose.push(this.modal_header_close_button);
        this.modal_header.append(this.modal_header_close_button);
        this.modal_header_title = $('<h3>', {
          "class": 'modal-header-title'
        }).html(this.config.title);
        this.modal_header.append(this.modal_header_title);
        this.modal_content.append(this.config.content);
        ref1 = this.config.buttons;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          button = ref1[j];
          this.modal_footer.append(button);
        }
        this.modal_dialog.append(this.modal_header).append(this.modal_content).append(this.modal_footer);
        this.modal_container.append(this.modal_dialog);
        $('body').append(this.bg).append(this.modal_container);
        $(this.config.setClose).each(function(ind, el) {
          return el.on('click', function() {
            return M.close();
          });
        });
        if (this.config.autoopen === true) {
          this.open();
        }
        if (this.config.callback !== false && typeof this.config.callback === 'function') {
          this.config.callback.call(this);
        }
        return this;
      }

      Modal.prototype.open = function() {
        var M;
        M = this;
        setTimeout(function() {
          return M.bg.removeClass('hidden');
        }, 50);
        setTimeout(function() {
          return M.modal_container.removeClass('hidden');
        }, 250);
        return this;
      };

      Modal.prototype.close = function() {
        var M;
        M = this;
        this.modal_header_close_button.off('click');
        setTimeout(function() {
          return M.modal_container.addClass('hidden');
        }, 50);
        setTimeout(function() {
          return M.bg.addClass('hidden');
        }, 250);
        setTimeout(function() {
          M.bg.remove();
          M.bg = null;
          M.modal_container.remove();
          M.modal_container = null;
          M.modal_dialog.remove();
          M.modal_dialog = null;
          M.modal_header.remove();
          M.modal_header = null;
          M.modal_content.remove();
          M.modal_content = null;
          M.modal_footer.remove();
          return M.modal_footer = null;
        }, this.config.timeout + 110);
        return this;
      };

      return Modal;

    })();
    return Modal;
  });

}).call(this);

//# sourceMappingURL=modal.js.map
