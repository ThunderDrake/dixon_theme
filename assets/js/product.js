// Generated by CoffeeScript 1.12.7
(function() {
  var Product;

  Product = (function() {
    function Product() {
      this.configure();
      this.init();
      return this;
    }

    Product.prototype.configure = function() {
      var max, min;
      this.regex = /0*$/g;
      this.regex2 = /\.$/g;
      this.price = $('[data-node="price"]');
      this.price_val = parseFloat(this.price.data('price'));
      this.form = $('#cart-controls');
      this.counts = $('input.qty', this.form);
      this.countp = $('button.qty-plus', this.form);
      this.countm = $('button.qty-minus', this.form);
      this.min_cnt = 1;
      this.max_cnt = 100;
      min = this.counts.attr('min');
      max = this.counts.attr('max');
      if (max) {
        this.max_cnt = parseInt(max);
      }
      if (min) {
        this.min_cnt = parseInt(min);
      }
      this.input_price = $('.count-controls input[type="hidden"][name="price"]');
      this.gallery = $('.product-gallery-wrapper');
      this.gallery_images = $('.product-images', this.gallery);
      this.gallery_thumbnails = $('.product-thumbnails', this.gallery);
      this.gallery_thumb_nxt = $('.swiper-button-next', this.gallery);
      this.gallery_thumb_prv = $('.swiper-button-prev', this.gallery);
    };

    Product.prototype.init = function() {
      this.initGallery();
      this.countsListener();
      this.ajaxAddToCart();
    };

    Product.prototype.initGallery = function() {
      var IP, config;
      IP = this;
      if (this.gallery.length > 0) {
        config = {
          loop: true,
          slidesPerView: 1,
          speed: 500,
          effect: 'slide',
          roundLengths: true,
          watchOverflow: true,
          navigation: {
                nextEl: this.gallery_thumb_nxt,
                prevEl: this.gallery_thumb_prv
              }
        };
        if (this.gallery_thumbnails.length > 0) {
          config['thumbs'] = {
            swiper: {
              el: this.gallery_thumbnails,
              infinite:true,
              slidesPerView: 3,
              spaceBetween: 5,
              speed: 500,
              effect: 'slide',
              roundLengths: true,
              watchOverflow: true,
              direction: 'vertical',
            }
          };
        }
        return this.images = new Swiper(this.gallery_images, config);
      }
    };

    Product.prototype.countsListener = function() {
      var I;
      I = this;
      this.counts.on('change', function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return I.countsListenerCallback('chk');
      });
      this.countm.on('click', function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return I.countsListenerCallback('dcr');
      });
      this.countp.on('click', function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return I.countsListenerCallback('icr');
      });
      this.countsListenerCallback('chk');
    };

    Product.prototype.countsListenerCallback = function(dir) {
      var val;
      val = 0;
      switch (dir) {
        case 'dcr':
          val = this.counts.val();
          val--;
          if (val < this.min_cnt) {
            val = this.min_cnt;
          }
          this.counts.val(val);
          break;
        case 'icr':
          val = this.counts.val();
          val++;
          if (val > this.max_cnt) {
            val = this.max_cnt;
          }
          this.counts.val(val);
          break;
        case 'chk':
          val = this.counts.val();
          if (val < this.min_cnt) {
            val = this.min_cnt;
          }
          if (val > this.max_cnt) {
            val = this.max_cnt;
          }
          this.counts.val(val);
          break;
      }
      if (val <= this.min_cnt) {
        this.countm.attr('disabled', 'disabled');
      } else {
        this.countm.removeAttr('disabled');
      }
      if (val >= this.max_cnt) {
        return this.countp.attr('disabled', 'disabled');
      } else {
        return this.countp.removeAttr('disabled');
      }
    };

    Product.prototype.ajaxAddToCart = function() {
      var $warp_fragment_refresh, P;
      P = this;
      $warp_fragment_refresh = {
        url: wc_cart_fragments_params.wc_ajax_url.toString().replace('%%endpoint%%', 'get_refreshed_fragments'),
        type: 'POST',
        success: function(data) {
          return $(document.body).trigger("added_to_cart", [data.fragments, data.cart_hash, false]);
        }
      };
      return this.form.on('submit', function(e) {
        var form, product_url;
        e.preventDefault();
        product_url = window.location;
        form = $(this);
        return $.post(product_url, form.serialize() + '&_wp_http_referer=' + product_url, function(result) {
          return $.ajax($warp_fragment_refresh);
        });
      });
    };

    return Product;

  })();

  $(document).ready(function() {
    return window.Product = new Product();
  });

}).call(this);

//# sourceMappingURL=product.js.map
